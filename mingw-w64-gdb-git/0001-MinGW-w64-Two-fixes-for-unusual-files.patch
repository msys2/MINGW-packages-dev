From 643f34ab9e7d95fead48b7eb9e66ca093027e5ca Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Sat, 31 Oct 2015 21:39:35 +0000
Subject: [PATCH] MinGW-w64: Two fixes for 'unusual' files.

Handle isatty() files better.
Pretend 'nul' is '/dev/null' which is necessary for libtool.
---
 binutils/bucomm.c  | 20 ++++++++++++++++++--
 binutils/elfedit.c | 15 ++++++++++++++-
 binutils/readelf.c | 15 ++++++++++++++-
 3 files changed, 46 insertions(+), 4 deletions(-)

diff --git a/binutils/bucomm.c b/binutils/bucomm.c
index 8ce66ab8cce..72df1e66986 100644
--- a/binutils/bucomm.c
+++ b/binutils/bucomm.c
@@ -597,10 +597,19 @@ off_t
 get_file_size (const char * file_name)
 {
   struct stat statbuf;
+  int f, t;
 
   if (file_name == NULL)
     return (off_t) -1;
 
+  t = -1;
+  f = open (file_name, O_RDONLY | O_BINARY);
+  if (f != 0)
+    {
+      t = isatty (f);
+      close (f);
+    }
+
   if (stat (file_name, &statbuf) < 0)
     {
       if (errno == ENOENT)
@@ -611,8 +620,15 @@ get_file_size (const char * file_name)
     }
   else if (S_ISDIR (statbuf.st_mode))
     non_fatal (_("Warning: '%s' is a directory"), file_name);
-  else if (! S_ISREG (statbuf.st_mode))
-    non_fatal (_("Warning: '%s' is not an ordinary file"), file_name);
+  else if (! S_ISREG (statbuf.st_mode) || t > 0)
+    {
+#ifdef _WIN32
+      /* libtool passes /dev/null and checks for /dev/null in the output */
+      if (stricmp (file_name, "nul") == 0)
+        file_name = "/dev/null";
+#endif
+      non_fatal (_("Warning: '%s' is not an ordinary file"), file_name);
+    }
   else if (statbuf.st_size < 0)
     non_fatal (_("Warning: '%s' has negative size, probably it is too large"),
                file_name);
diff --git a/binutils/elfedit.c b/binutils/elfedit.c
index e33c340d758..829cc04f46d 100644
--- a/binutils/elfedit.c
+++ b/binutils/elfedit.c
@@ -707,6 +707,14 @@ static int
 check_file (const char *file_name, struct stat *statbuf_p)
 {
   struct stat statbuf;
+  int f, t;
+  t = -1;
+  f = open (file_name, O_RDONLY | O_BINARY);
+  if (f != 0)
+    {
+      t = isatty (f);
+      close (f);
+    }
 
   if (statbuf_p == NULL)
     statbuf_p = &statbuf;
@@ -735,8 +743,13 @@ check_file (const char *file_name, struct stat *statbuf_p)
     }
 #endif
 
-  if (! S_ISREG (statbuf_p->st_mode))
+  if (! S_ISREG (statbuf_p->st_mode) || t > 0)
     {
+#ifdef _WIN32
+      /* libtool passes /dev/null and checks for /dev/null in the output */
+      if (stricmp (file_name, "nul") == 0)
+        file_name = "/dev/null";
+#endif
       error (_("'%s' is not an ordinary file\n"), file_name);
       return 1;
     }
diff --git a/binutils/readelf.c b/binutils/readelf.c
index a6073f7ec80..8978d29870a 100644
--- a/binutils/readelf.c
+++ b/binutils/readelf.c
@@ -21873,6 +21873,14 @@ process_file (char * file_name)
   struct stat statbuf;
   char armag[SARMAG];
   bool ret = true;
+  int f, t;
+  t = -1;
+  f = open (file_name, O_RDONLY | O_BINARY);
+  if (f != 0)
+    {
+      t = isatty (f);
+      close (f);
+    }
 
   if (stat (file_name, &statbuf) < 0)
     {
@@ -21884,8 +21892,13 @@ process_file (char * file_name)
       return false;
     }
 
-  if (! S_ISREG (statbuf.st_mode))
+  if (! S_ISREG (statbuf.st_mode) || t > 0)
     {
+#ifdef _WIN32
+      /* libtool passes /dev/null and checks for /dev/null in the output */
+      if (stricmp (file_name, "nul") == 0)
+        file_name = "/dev/null";
+#endif
       error (_("'%s' is not an ordinary file\n"), file_name);
       return false;
     }
-- 
2.32.0

